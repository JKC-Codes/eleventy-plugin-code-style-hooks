---
title: 'test'
permalink: '/test/'
eleventyExcludeFromCollections: true
---

<p>testing</p>

<pre><code>function test() {
	return 'has no attributes';
}</code></pre>

<div class="language-js">

	<pre><code class="lang-js">
		function test() {
			return 'should be js';
		}
	</code></pre>

	<div>

		<pre><code class="language-css">
			.should {
				be: css;
			}
		</code></pre>

		<pre><code class="language-javascript">
			function test() {
				return 'should be javascript';
			}
		</code></pre>

	</div>

	<div data-highlight-syntax="false">

		<pre><code>
			function test() {
				return 'should not highlight syntax';
			}
		</code></pre>

	</div>

	<div data-highlight-syntax="false">

		<pre><code>
			function test() {
				return 'should not highlight syntax';
			}

		</code></pre>
	</div>

	<pre><code>
		function test() {
			return 'should be js';
		}
	</code></pre>

	<pre><code class="lang-js" data-highlight-syntax="false">
		function test() {
			return 'should be js';
		}
	</code></pre>

	<pre><code class="lang-javascript" data-highlight-syntax="false">
		function test() {
			return 'should be javascript';
		}
	</code></pre>

	<pre><code data-highlight-syntax="false">
		function test() {
			return 'should not highlight syntax';
		}
	</code></pre>

	<pre><span><code>
		function test() {
			return 'span wrapped in pre should be js';
		}
	</code></span></pre>

</div>

<pre><code>
	function test() {
		return 'should not inherit a language class';
	}
</code></pre>

<pre class="lang-js"><code class="foo">
	function test() {
		return 'code should keep existing foo class';
	}
</code></pre>

<pre><code class="language-foo test language-bar test language-baz">
	function test() {
		return 'code should not have double spaces';
	}
</code></pre>

<pre><code class=" language-foo  language-bar   language-baz    ">
	function test() {
		return 'code should keep an extra space at start and 7 before line-numbers';
	}
</code></pre>

<pre class="FOO Lang-JS"><code>
	function test() {
		return 'pre FOO class should be uppercase and language-js should be lower case';
	}
</code></pre>

<pre class="LANG-js"><code>
	function test() {
		return 'lang class should be lower case';
	}
</code></pre>

<pre><code class="lang-JS">
	function test() {
		return 'JS class should be lower case';
	}
</code></pre>

<pre class="lang-JS"><code data-stay>
	function test() {
		return 'data-stay attribute on code should stay';
	}
</code></pre>

<pre data-line-numbers="false"><code class="">
	function test() {
		return 'empty class on code should stay';
	}
</code></pre>

<pre class="lang-JS"><code class="">
	function test() {
		return 'empty class on code should be replaced';
	}
</code></pre>

<div class="language-foo">

	<div class="language-bar">
		<p>should inherit language-bar</p>
		<pre><code>
			function test() {
				return 'identical';
			}
		</code></pre>

	</div>

	<div>
		<p>should inherit language-foo</p>
		<pre><code>
			function test() {
				return 'identical';
			}
		</code></pre>

	</div>

</div>

<div class="language-foo">

	<div>
		<p>should inherit language-foo</p>
		<pre><code>
			function test() {
				return 'identical';
			}
		</code></pre>

	</div>

	<div class="language-bar">
		<p>should inherit language-bar</p>
		<pre><code>
			function test() {
				return 'identical';
			}
		</code></pre>

	</div>

</div>

<pre class="language-html foo language-css bar language-js baz"><code>
	function test() {
		return 'code should only inherit html';
	}
</code></pre>

<pre class="foo language-html bar"><code class="language-css language-js">
	.test {
		content: 'pre should have language-html removed';
	}
</code></pre>

<div class="lang-js">
	should not have an empty class
</div>

<pre></pre>

<pre>a</pre>

<pre class="lang-test1 lang-bar">
	<code class="language-foo language-bar language-baz lang-foo lang-test2 lang-bar lang-baz">
		function test() {
			return 'pre should have lang-test1 removed and language-foo added with language-bar staying';
		}
	</code>
	<code class="language-bar language-baz lang-foo lang-bar lang-baz">
		function test() {
			return 'pre should have lang-test1 removed and language-foo added with language-bar staying';
		}
	</code>
</pre>

<pre class="language-js"><code data-highlight-syntax="false">
	function test() {
		return 'should not be highlighted';
	}
</code></pre>

<pre class="language-js"><code data-highlight-syntax="false">
	function test() {
		return 'should not be highlighted';
	}
</code></pre>

<pre class="lang-js">
	<code data-highlight-syntax="false">
		function test() {
			return 'should not be highlighted';
		}
	</code>
	<code class="language-html">
		function test() {
			return 'should have html';
		}
	</code><code class="">
		function test() {
			return 'should replace empty class with language-js';
		}
	</code>
</pre>

<code class="language-html">
	&lt;p>should be html&lt;/p>
</code>

<code class="language-css">
	.should {
		be: css;
	}
</code>

<code class="language-js">
	function test() {
		return 'should be js';
	}
</code>

<code>&lt;p&gt;escaped&lt;/p&gt;<p>not escaped</p></code>

<code class="lang-html">&lt;p&gt;escaped&lt;/p&gt;<p>not escaped</p></code>

<pre class="foo foo language-js bar"><code class="foo language-javascript bar bar">
	function test() {
		return 'should keep duplicated classes - foo foo on pre and bar bar on code';
	}
</code></pre>

<pre><code class="language-js">
	function test() {
		<code class="lang-css">.css {
			within: js;
		}</code>
		return 'js contains css';
	}</code></pre>

<pre><code class="language-javascript line-numbers">
	function test() {
		return 'pre and code should have line-numbers class';
	}
</code></pre>

<pre class="line-numbers"><code class="language-javascript">
	function test() {
		return 'pre and code should have line-numbers class';
	}
</code></pre>

<div class="line-numbers">
<pre><code class="language-javascript">
	function test() {
		return 'pre and code should have line-numbers class';
	}
</code></pre>
</div>

<div class="lang-js" data-highlight-syntax="false">
<pre><code data-highlight-syntax="true" data-highlight-syntax="false">
	function test() {
		return 'should highlight syntax and remove data-highlight-syntax from div and code';
	}
</code></pre>
</div>

<div class="lang-js">
<pre><code data-highlight-syntax="false">
	function test() {
		return 'should not highlight syntax but still remove data-highlight-syntax from code';
	}
</code></pre>
</div>

<pre><code data-show-color="true" class="lang-css">
	.foo {
		color: #f00;
		/* should show colour and remove data-show-color attribute */
	}
</code></pre>

<pre><code data-show-color="false" class="lang-css">
	.foo {
		color: #f00;
		/* should not show colour but still remove data-show-color attribute */
	}
</code></pre>

<pre class="lang-JavaScript"><code data-show-language="true">
	function test() {
		return 'pre and code should have data-language="JavaScript" attribute and remove data-show-language attribute';
	}
</code></pre>

<pre class="lang-JavaScript"><code data-show-language="false">
	function test() {
		return 'pre and code should not have data-language="JavaScript" attribute;
	}
</code></pre>

<pre class="lang-js"><code data-highlight-syntax="true" data-highlight-syntax="true" data-show-color="true" data-show-color="true" data-show-language="true" data-show-language="true" data-line-numbers="true" data-line-numbers="true">
	function test() {
		return 'multiple duplicate attributes should be removed';
	}
</code></pre>

<pre>
<code class="lang-HTML">
	&lt;p>data-language value on pre should be HTML CSS JavaScript&lt;/p>
</code>
<code class="language-CSS">
	.pre-data-language {
		shouldbe: 'HTML CSS JavaScript';
	}
</code>
<code class="lang-JavaScript">
	function test() {
		return 'data-language value on pre should be HTML CSS JavaScript';
	}
</code>
</pre>

<pre>
<code class="lang-HTML">
	&lt;p>data-language value on pre should be HTML html&lt;/p>
</code>
<code class="lang-html">
	&lt;p>data-language value on pre should be HTML html&lt;/p>
</code>
<code class="lang-HTML">
	&lt;p>data-language value on pre should be HTML html&lt;/p>
</code>
</pre>

<pre class="lang-js">
<code class="line-numbers">
	function test() {
		return 'duplicate line-numbers class on code should be removed';
	}
</code>
</pre>

<pre class="line-numbers">
<code class="lang-js">
	function test() {
		return 'duplicate line-numbers class on pre should be removed';
	}
</code>
</pre>

<pre class="lang-html lang-html">
<code>
	&lt;p>duplicate lang-html classes on pre should be removed&lt;/p>
</code>
<code class="lang-js lang-js lang-js">
	function test() {
		return 'duplicate lang-js classes on code should be removed';
	}
</code>
</pre>

<pre><code class="language-js">
	function test() {
		return 'should have spaces on top and bottom';
	}
</code></pre>

<pre><code class="language-js">function test() {
		return 'should not have spaces on top and bottom';
	}</code></pre>

<pre>foo<code class="language-js">function test() {
	return 'should not have spaces on top and bottom';
}</code></pre>

<pre><code class="language-js">function test() {
	return 'should not have spaces on top and bottom';
}</code>
new line<code class="language-js">function test() {
	return 'should not have spaces on top and bottom';
}</code></pre>

<pre><code class="language-js">function test() {
	return 'should not have spaces on top and bottom';
}</code>
<span>new line in span</span><code class="language-js">function test() {
	return 'should not have spaces on top and bottom';
}</code></pre>

<pre><span>foo
</span>
<code class="language-js">function test() {
	return 'foo + new line wrapped in span on line before code';
}</code></pre>

<pre><span>foo
</span><code class="language-js">function test() {
	return 'foo + new line wrapped in span on same line as code';
}</code></pre>

<pre><span>
foo
bar
baz</span><code class="language-js">function test() {
	return 'foo bar baz all on new lines in span baz on same line as code';
}</code></pre>

<pre><span>
foo
bar
baz
</span><code class="language-js">function test() {
	return 'foo bar baz all on new lines in span on same line as code';
}</code></pre>

<pre class="lang-js"><code data-line-numbers="true">
	function test() {
		return 'should have line numbers and remove data-line-numbers attribute';
	}
</code></pre>

<pre class="lang-js"><code data-line-numbers="false">
	function test() {
		return 'should not have line numbers but still remove data-line-numbers attribute';
	}
</code></pre>

<pre class="lang-js">
this line shouldn't be numbered
<code>let line1;</code><code>let stillLine1;</code><code>let lastOfLine1;
let line2;</code>
<code>let line3;</code>
this line shouldn't be numbered
</pre>

<pre class="lang-js">
this line shouldn't be numbered
<code>let line1;</code><code>let stillLine1;</code><code>let lastOfLine1;
let line2;</code>
this line shouldn't be numbered
<code>let line3;</code>
this line shouldn't be numbered
</pre>

<pre><code class="lang-css">
.red {
	color: #f00;
}

.green {
	color: #0f0;
}

.blue {
	color: #00f;
}

.red {
	color: #f009;
}

.green {
	color: #0f09;
}

.blue {
	color: #00f9;
}

.red {
	color: #ff0000;
}

.green {
	color: #00ff00;
}

.blue {
	color: #0000ff;
}

.red {
	color: #ff000099;
}

.green {
	color: #00ff0099;
}

.blue {
	color: #0000ff99;
}

.red {
	color: rgb(255, 0, 0);
}

.green {
	color: rgb(0, 255, 0);
}

.blue {
	color: rgb(0, 0, 255);
}

.red {
	color: rgb(255, 0, 0, 0.5);
}

.green {
	color: rgb(0, 255, 0, 0.5);
}

.blue {
	color: rgb(0, 0, 255, 0.5);
}

.red {
	color: rgba(255, 0, 0, 0.5);
}

.green {
	color: rgba(0, 255, 0, 0.5);
}

.blue {
	color: rgba(0, 0, 255, 0.5);
}

.red {
	color: rgb(255 0 0);
}

.green {
	color: rgb(0 255 0);
}

.blue {
	color: rgb(0 0 255);
}

.red {
	color: rgb(255 0 0 / 0.5);
}

.green {
	color: rgb(0 255 0 / 0.5);
}

.blue {
	color: rgb(0 0 255 / 0.5);
}

.red {
	color: rgba(255 0 0 / 0.5);
}

.green {
	color: rgba(0 255 0 / 0.5);
}

.blue {
	color: rgba(0 0 255 / 0.5);
}

.red {
	color: hsl(0, 100%, 50%);
}

.green {
	color: hsl(120, 100%, 50%);
}

.blue {
	color: hsl(240, 100%, 50%);
}

.red {
	color: hsl(0, 100%, 50%, 0.5);
}

.green {
	color: hsl(120, 100%, 50%, 0.5);
}

.blue {
	color: hsl(240, 100%, 50%, 0.5);
}

.red {
	color: hsla(0, 100%, 50%, 0.5);
}

.green {
	color: hsla(120, 100%, 50%, 0.5);
}

.blue {
	color: hsla(240, 100%, 50%, 0.5);
}

.red {
	color: hsl(0 100% 50%);
}

.green {
	color: hsl(120 100% 50%);
}

.blue {
	color: hsl(240 100% 50%);
}

.red {
	color: hsl(0 100% 50% / 0.5);
}

.green {
	color: hsl(120 100% 50% / 0.5);
}

.blue {
	color: hsl(240 100% 50% / 0.5);
}

.red {
	color: hsla(0 100% 50% / 0.5);
}

.green {
	color: hsla(120 100% 50% / 0.5);
}

.blue {
	color: hsla(240 100% 50% / 0.5);
}

.lab {
	color: lab(52.2345% 72.2 56.2);
}

.lch {
	color: lch(54.29% 106.839 0.5turn);
}
</code></pre>

<pre><code>
function test() {
	return 'has no attributes';
}</code></pre>